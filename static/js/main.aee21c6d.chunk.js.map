{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","onSubmit","submit","type","value","onChange","change","placeholder","Result","bad","weather","error","city","date","temp","timezone","description","pressure","wind","content","className","APIKey","App","state","icon","handleInputChange","e","setState","target","handleCitySubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","location","localtime","timezone_id","current","temperature","wind_speed","weather_descriptions","catch","console","log","this","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"kPAaeA,EAXF,SAACC,GACV,OAEI,0BAAMC,SAAUD,EAAME,QAClB,2BAAOC,KAAK,OAAOC,MAAOJ,EAAMI,MAAOC,SAAUL,EAAMM,OAASC,YAAY,iBAC5E,qDC0CGC,G,MA9CA,SAACR,GAAW,IAMvBS,EANsB,EAE4CT,EAAMU,QAAlEC,EAFgB,EAEhBA,MAAOC,EAFS,EAETA,KAAKC,EAFI,EAEJA,KAAKC,EAFD,EAECA,KAAKC,EAFN,EAEMA,SAASC,EAFf,EAEeA,YAAYC,EAF3B,EAE2BA,SAASC,EAFpC,EAEoCA,KAG1DC,EAAU,KAgCV,OA9BAR,GAASC,IAITO,EACA,oCACA,yBAAKC,UAAU,aACX,wDAA6B,8BAAOR,IACpC,8CAAmB,8BAAOC,IAC1B,oDAAyB,8BAAOC,EAAP,WACzB,8CAAmB,8BAAOC,IAG1B,gDAAgB,8BAAOG,EAAP,SAChB,8CAAc,8BAAOD,EAAP,SACd,4CAAiB,8BAAOD,OAShCP,EACI,yBAAKW,UAAU,SACP,qDAA0B,gCAASR,GAAnC,aAKT,yBAAKQ,UAAU,UAEjBT,EAAQF,EAAMU,KCtCTE,G,MAAM,oCAsFGC,E,4MAnFfC,MAAQ,CACNnB,MAAO,GACPS,KAAM,GACND,KAAM,GAGNE,KAAM,GACNC,SAAS,GACTS,KAAK,GACLP,SAAU,GACVC,KAAM,GACNP,OAAO,EACPK,YAAY,I,EAMdS,kBAAoB,SAACC,GACnB,EAAKC,SAAS,CACZvB,MAAOsB,EAAEE,OAAOxB,S,EAIpByB,iBAAmB,SAACH,GAClBA,EAAEI,iBAEF,IAAIC,EAAG,8FAA0FV,EAA1F,kBAA0G,EAAKE,MAAMnB,MAArH,YASP4B,MAAMD,GACLE,MAAK,SAAAC,GACJ,GAAGA,EAASC,GACZ,OAAOD,EAEP,MAAME,MAAM,mDAEbH,MAAK,SAAAC,GAAQ,OAAIA,EAASG,UAC1BJ,MAAK,SAAAK,GAIR,EAAKX,SAAS,CACZhB,OAAM,EACNE,KAAMyB,EAAKC,SAASC,UACpBzB,SAAUuB,EAAKC,SAASE,YACxB3B,KAAMwB,EAAKI,QAAQC,YACnB1B,SAAUqB,EAAKI,QAAQzB,SACvBC,KAAMoB,EAAKI,QAAQE,WACnBhC,KAAM,EAAKW,MAAMnB,MACjBY,YAAasB,EAAKI,QAAQG,0BAIzBC,OAAM,SAAAnC,GACLoC,QAAQC,IAAIrC,GACd,EAAKgB,SAAS,CACZhB,OAAM,EACNC,KAAK,EAAKW,MAAMnB,Y,uDAMlB,OACE,yBAAKgB,UAAU,OACd,kBAAC,EAAD,CACAhB,MAAO6C,KAAK1B,MAAMnB,MAClBE,OAAQ2C,KAAKxB,kBACbvB,OAAQ+C,KAAKpB,mBAEb,kBAAC,EAAD,CAAQnB,QAASuC,KAAK1B,a,GA/ET2B,aCMEC,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAA8B,GACJA,EAAaC,gBAEdlB,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMsD,a","file":"static/js/main.aee21c6d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = (props) => {\n    return (\n        \n        <form onSubmit={props.submit}>\n            <input type=\"text\" value={props.value} onChange={props.change}  placeholder=\"Podaj miasto\"/>\n            <button>Wyszukaj miasto</button>\n        </form> \n    \n    );\n}\n \nexport default Form;\n","import React from 'react';\nimport './Result.css';\n\nconst Result = (props) => {\n\n    const{error, city,date,temp,timezone,description,pressure,wind} = props.weather;\n    // sunset,sunrise,mintemp,maxtemp,sunhour\n\nlet content = null;\nlet bad = null;\nif(!error && city){\n\n// const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString()\n// const sunsetTime = new Date(sunset * 1000).toLocaleTimeString()\n    content = (\n    <>\n    <div className=\"container\">\n        <h1>Wyniki wyszukiwania dla: <span>{city}</span></h1>\n        <p>Data i godzina: <span>{date}</span></p>\n        <p>Aktualna temperatura: <span>{temp} &#176;C</span></p>\n        <p>Strefa czasowa: <span>{timezone}</span></p>\n        {/* <p>Wschód słońca: <span>{sunrise}</span></p> \n        <p>Zachód słońca: <span>{sunset}</span></p>  */}\n        <p>Siła wiatru: <span>{wind} m/s</span></p> \n        <p>Ciśnienie: <span>{pressure} hPa</span></p>\n        <p>Zachmurzenie: <span>{description}</span></p>\n        {/* <p>Min. Temperatura: <span>{mintemp} &#176;C</span></p>\n        <p>Max. Temperatura: <span>{maxtemp} &#176;C</span></p> \n        <p>Liczba godz. słonecznych: <span>{sunhour} h</span></p>  */}\n        </div>\n    </>\n    )\n}\n\nbad=(\n    <div className=\"error\">\n            <p>Nie ma takiego miasta: <strong>{city}</strong> w bazie</p>\n    </div>\n\n)\n    return (  \n   <div className=\"result\">\n    \n{error ? bad : content}\n\n   </div>\n    );\n}\n \nexport default Result;\n","import React, { Component } from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport  './App.css';\n\nconst APIKey = `96485acf2df68545b326e51fcbc1e970`;\nclass App extends Component {\n\nstate = {\n  value: \"\",\n  date: '',\n  city: '',\n  // sunrise: '',\n  // sunset: '',\n  temp: '',\n  timezone:'',\n  icon:'',\n  pressure: '',\n  wind: '',\n  error: false,\n  description:'',\n  // mintemp:'',\n  // maxtemp:'',\n  // sunhour:'',\n};\n\nhandleInputChange = (e) => {\n  this.setState({\n    value: e.target.value\n  })\n}\n\nhandleCitySubmit = (e) => {\n  e.preventDefault();\n  // let API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n  let API = `https://cors-anywhere.herokuapp.com/http://api.weatherstack.com/forecast?access_key=${APIKey}&query=${this.state.value}&units=m`;\n\n\n//   if (location.protocol === 'http:') {\n//     API = `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n//  } else {\n//     API = `https://cors-anywhere.herokuapp.com/https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n//  }\n\n  fetch(API)\n  .then(response =>{\n    if(response.ok){\n    return response\n    }\n    throw Error(\"Podaj prawidłową nazwę miasta\")\n  })\n  .then(response => response.json())\n  .then(data => {\n\n    // const time = new Date().toLocaleString();\n\nthis.setState({\n  error:false,\n  date: data.location.localtime,\n  timezone: data.location.timezone_id,\n  temp: data.current.temperature,\n  pressure: data.current.pressure,\n  wind: data.current.wind_speed,\n  city: this.state.value,\n  description: data.current.weather_descriptions,\n \n})\n  })\n  .catch(error => {\n    console.log(error);\n  this.setState({\n    error:true,\n    city:this.state.value\n  })\n})\n}\n\nrender(){\n  return (\n    <div className=\"app\">\n     <Form \n     value={this.state.value} \n     change={this.handleInputChange}\n     submit={this.handleCitySubmit}\n      />\n     <Result weather={this.state} />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}